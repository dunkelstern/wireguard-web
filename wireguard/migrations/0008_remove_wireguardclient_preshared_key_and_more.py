# Generated by Django 4.2 on 2023-04-21 21:40

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("wireguard", "0007_wireguardclient_allow_direct_peering_and_more"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="wireguardclient",
            name="preshared_key",
        ),
        migrations.AlterField(
            model_name="wireguardclient",
            name="allow_direct_peering",
            field=models.BooleanField(
                default=False,
                help_text="Allow direct communication with this client by other clients in the same network without bouncing traffic over the VPN server",
                verbose_name="Allow P2P target",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclient",
            name="exit_interface",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Network interface to which to route external traffic",
                max_length=16,
                null=True,
                verbose_name="Exit interface",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclient",
            name="is_exitnode",
            field=models.BooleanField(
                default=False,
                help_text="This client is a NAT gateway/exit node to a bridged network",
                verbose_name="Exitnode",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclient",
            name="keepalive",
            field=models.IntegerField(default=0, verbose_name="Keepalive timeout"),
        ),
        migrations.AlterField(
            model_name="wireguardclient",
            name="name",
            field=models.CharField(
                help_text="The client name to identify this device. This becomes the DNS name",
                max_length=128,
                unique=True,
                verbose_name="Client name",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclient",
            name="route_all_traffic",
            field=models.BooleanField(
                default=False,
                help_text="Directs the client to route all traffic through this VPN, be aware that this might break local access to the network.",
                verbose_name="Route all traffic",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclient",
            name="use_dns",
            field=models.BooleanField(
                default=False,
                help_text="Select this to use the VPN's DNS server. If you're routing all traffic through this server, all DNS queries will go through the server too. If not all traffic is routed through the DNS the implementation on the clients differ, but optimally they will only send queries for the DNS domain.",
                verbose_name="Use server DNS",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclientip",
            name="ip",
            field=models.GenericIPAddressField(
                help_text="This defines an IP address the client will be assigned by wireguard",
                unpack_ipv4=True,
                verbose_name="IP Address",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclientlocalnetwork",
            name="gateway",
            field=models.GenericIPAddressField(
                help_text="The default Gateway the client has in it's local network",
                unpack_ipv4=True,
                verbose_name="Gateway IP",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclientlocalnetwork",
            name="ip",
            field=models.GenericIPAddressField(
                help_text="This defines the IP address the client has in it's local network",
                unpack_ipv4=True,
                verbose_name="IP Address",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclientlocalnetwork",
            name="public_ip",
            field=models.GenericIPAddressField(
                help_text="The public IP address seen when this entry was created, if the client endpoint changes from this value the entry becomes invalid.",
                unpack_ipv4=True,
                verbose_name="Public IP",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardclientnetworks",
            name="cidr_mask",
            field=models.IntegerField(verbose_name="Netmask"),
        ),
        migrations.AlterField(
            model_name="wireguardclientnetworks",
            name="ip",
            field=models.GenericIPAddressField(
                help_text="The address of a network that this client should be a router for",
                unpack_ipv4=True,
                verbose_name="Network address",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="allow_client_bridges",
            field=models.BooleanField(
                default=False,
                help_text="Clients may bridge to their Network, be aware only staff users can configure their devices to allow bridges",
                verbose_name="Client Bridges",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="allow_direct_peering",
            field=models.BooleanField(
                default=True, help_text="Allow client peer2peer communication", verbose_name="Client P2P"
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="clients_may_communicate",
            field=models.BooleanField(
                default=True,
                help_text="Clients may communicate with each other and the VPN server",
                verbose_name="Client communication",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="dns_domain",
            field=models.CharField(
                default="vpn.local",
                help_text="Domain name for all clients when DNS is enabled",
                max_length=128,
                verbose_name="DNS Domain",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="enabled",
            field=models.BooleanField(default=True, verbose_name="Enabled"),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="exit_interface",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Network interface to which to route external traffic",
                max_length=16,
                null=True,
                verbose_name="NAT exit interface",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="fw_mark",
            field=models.IntegerField(default=0, verbose_name="FWMark"),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="has_dns",
            field=models.BooleanField(
                default=False,
                help_text="This server should have a DNS resolver, an instance of dnsmasq is configured and started",
                verbose_name="DNS",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="hostname",
            field=models.CharField(
                help_text="Server host-name or IP address on which this is reachable from the clients", max_length=128
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="interface_name",
            field=models.CharField(
                help_text="The interface name for this network, usual values are 'wg0' or 'wt0', but may be anything",
                max_length=16,
                unique=True,
                verbose_name="Network interface",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="is_exitnode",
            field=models.BooleanField(
                default=False,
                help_text="This server is a NAT gateway or exit node, if you enable routing all traffic through this server make sure the internet is accessible from the exit interface",
                verbose_name="Exitnode",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="keepalive",
            field=models.IntegerField(
                default=0,
                help_text="If this is set to a non-zero value this server enforces all clients to send keepalive messages",
                verbose_name="Keepalive timeout (seconds)",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="may_route_all_traffic",
            field=models.BooleanField(
                default=False,
                help_text="Clients may access the Internet through this server by routing all IP traffic",
                verbose_name="All traffic",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="name",
            field=models.CharField(
                help_text="The server name to identify this VPN. This becomes the DNS name of the server",
                max_length=128,
                unique=True,
                verbose_name="Server name",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserver",
            name="port",
            field=models.IntegerField(
                default=44000,
                help_text="Port to listen on. If the server is behind a NAT please forward this UDP port. Use port > 1024",
                verbose_name="Listening port",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardservernetworks",
            name="cidr_mask",
            field=models.IntegerField(
                blank=True,
                default=None,
                help_text="If this is set to a non-blank value it defines this is a network address and clients will  get a route for this network",
                null=True,
                verbose_name="Netmask",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardservernetworks",
            name="ip",
            field=models.GenericIPAddressField(
                help_text="IP address of the server in this network", unpack_ipv4=True, verbose_name="IP Address"
            ),
        ),
        migrations.AlterField(
            model_name="wireguardservernetworks",
            name="is_client_network",
            field=models.BooleanField(
                default=False,
                help_text="If set then clients will get random IPs from this network",
                verbose_name="Client network",
            ),
        ),
        migrations.AlterField(
            model_name="wireguardserverselfregistration",
            name="email_domain",
            field=models.CharField(
                help_text="Users with this e-mail domain may self-register on this Server",
                max_length=128,
                verbose_name="e-Mail domain",
            ),
        ),
    ]
